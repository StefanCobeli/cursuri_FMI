<html lang="ro">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <link href="../src/prettify.css" type="text/css" rel="stylesheet" />

    <script src="../src/prettify.js" type="text/javascript"></script>

<!-- <style type="text/css">
      body { margin-left: .5in }
</style> -->

<style  type="text/css">
 h3 {color:red;} p {color:blue;} 
	body{ margin-left: .5in;}
</style>
</head>

<!-- BODY BODY BODY BODY BODY BODY BODY BODY BODY BODY  -->
  <body onload="prettyPrint()" bgcolor="white">
<H2>Lucru cu fișiere -- concatenare</H2>
<strong>Problema de rezolvat:</strong><br />
<strong>Problema 1:</strong><br />
<strong>F10.</strong> (2 puncte) Scrieti un program care concateneaza mai multe fisiere sursa
 intr-unul destinatie. Se va lansa sub forma:
   concat   f1 + f2 + ... + fn   f
 unde f1, ..., fn sunt fisierele sursa iar f este fisierul destinatie.
 Daca n=1, va copia pe f1 in f.

<hr align="center" />
Chiar vrea să fie cu plusuri "+" acolo???
<hr align="center" />

Diverse variante încercate, interesante în vederea obținerii rezolvării și mai mult decât atât!
<br />

<strong><h4>Vezi sursa pentru a vedea ce biblioteci se includ în preambulul file.c, pentru că în .html 
&lt; &gt; și ce e între ele devin invizibile!!!</h4></strong>

<!-- File1 -->
<h3 >Use system(), working with a variable: "cat" a file?</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
/*  gcc cat.c 
 * cat file and then concatenate 2 files
*/

#include <stdio.h>
#include <stdlib.h>

int main() {
	
   char ch, file_name[25];
//   FILE *fp;

	printf("Enter the name of file you wish to see\n");
	gets(file_name);

    setenv("VAR1", file_name, 1); // Create environment variable
//    system("echo $VAR1"); // Outputs name of 1st file
//    unsetenv("VAR1"); // Clear that variable (optional)

  system("cat $VAR1");
  return 0;
} 

</pre>
<!-- END CODE-CELL -->

<!-- File2 -->
<h3 >Concatenare 2 files using system()</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
/* Concatenăm 2 fișiere folosind cat (comanda bash) 
 * $ cat file1 file2 > file3 
*/

#include <stdio.h>
#include <stdlib.h>

int main() {
	
   char file_name1[100], file_name2[100], file_name12[100];
//   FILE *fp;
	printf("Enter the name of file1: ");
	scanf ("%s",file_name1);  
	printf("Enter the name of file2: ");
	scanf ("%s",file_name2);
	printf("Enter the name of the merged file: ");
	scanf ("%s",file_name12);
	printf("\nUnirea:\n ");

    setenv("FILE1", file_name1, 1); // Create environment variable
    setenv("FILE2", file_name2, 1); // Create environment variable
    setenv("FILE12", file_name12, 1); // Create environment variable

    system("cat $FILE1 $FILE2 > $FILE12"); // merge operation
    system("echo Am unit $FILE1 și $FILE2 în fișierul $FILE12."); // Echoes when done        

    unsetenv("FILE1"); // Clear that variable 
    unsetenv("FILE2"); // Clear that variable 
    unsetenv("FILE12"); // Clear that variable 

  return 0;
} 


</pre>
<!-- END CODE-CELL -->


<!-- File3 -->
<h3 >Concatenare 2 files</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
// concat_two_files.c 
// read 2 files and write one after the other
// Nice presentations of working with files
// http://www.dirac.org/linux/programming/tutorials/files_in_C/

// $ gcc cfile.c -o cfile
// sau
// $ gcc cfile.c // la mine nu merge asa
// sau 
// $ gcc -lstdc++ cfile.c -o cfile
// cu editorul geany se compile-build-run la clicks

/*
fopen modes
 The allowed modes for fopen are as follows: 
r  - open for reading
w  - open for writing (file need not exist)
a  - open for appending (file need not exist)
r+ - open for reading and writing, start at beginning
w+ - open for reading and writing (overwrite file)
a+ - open for reading and writing (append if file exists)
*/

#include <stdio.h>
#include <stdlib.h>
 
int main()
{
   char ch, file_name1[100], file_name2[100], file_concat[100];
   FILE *fp1, *fp2, *fp12;
 
   printf("Enter the name of file1\n");
   gets(file_name1);
   printf("Enter the name of file2\n");
   gets(file_name2);
   printf("Enter the name of fileUnite\n");
   gets(file_concat);   
   fp1 = fopen(file_name1,"r"); // read mode
   fp2 = fopen(file_name2,"r"); // read mode
   //fp12 = fopen(file_concat,"r+"); // read+write mode; nu crează newfilw dacă nu exista
    fp12 = fopen(file_concat,"w"); // write mode; 
// if the file exists, its contents are overwritten and 
// if the file does not exist, it will be created

   if( fp1 == NULL )
   {
      perror("Error while opening file1.\n");
      exit(EXIT_FAILURE);
   }
   if( fp2 == NULL )
   {
      perror("Error while opening file2.\n");
      exit(EXIT_FAILURE);
   } 
       if (fp12 == NULL) {
         printf("I couldn't open results.dat for writing.\n");
         exit(0);
      }

   printf("The contents of files %s and %s is :\n", file_name1, file_name2);
 
   while( ( ch = fgetc(fp1) ) != EOF ){
      printf("%c",ch);
      fprintf(fp12, "%c", ch);
  }
   while( ( ch = fgetc(fp2) ) != EOF ){
      printf("%c",ch);
      fprintf(fp12, "%c", ch);
   }   
   fclose(fp1); fclose(fp2); fclose(fp12);
   return 0;
}


</pre>
<!-- END CODE-CELL -->


<!-- File4 -->
<h3 >merge 2 files: cod de pe net</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
// http://www.programmingsimplified.com/c-program-merge-two-files
/*  gcc merge_two_files.c
*/

#include <stdio.h>
#include <stdlib.h>
 
int main()
{
   FILE *fs1, *fs2, *ft;
 
   char ch, file1[20], file2[20], file3[20];
 
   printf("Enter name of first file\n");
   gets(file1);
 
   printf("Enter name of second file\n");
   gets(file2);
 
   printf("Enter name of file which will store contents of two files\n");
   gets(file3);
 
   fs1 = fopen(file1,"r");
   fs2 = fopen(file2,"r");
 
   if( fs1 == NULL || fs2 == NULL )
   {
      perror("Error ");
      printf("Press any key to exit...\n");
      //getch();
      exit(EXIT_FAILURE);
   }
 
   ft = fopen(file3,"w");
 
   if( ft == NULL )
   {
      perror("Error ");
      printf("Press any key to exit...\n");
      exit(EXIT_FAILURE);
   }
 
   while( ( ch = fgetc(fs1) ) != EOF )
      fputc(ch,ft);
 
   while( ( ch = fgetc(fs2) ) != EOF )
      fputc(ch,ft);
 
   printf("Two files were merged into %s file successfully.\n",file3);
 
   fclose(fs1);
   fclose(fs2);
   fclose(ft);
 
   return 0;
}


</pre>
<!-- END CODE-CELL -->


<!-- File5 -->
<h3 >Lucrul cu argumente</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
// gcc arcuments.c -o arguments
//Running it :
//cristi@debian:~/projects/MERGE_FILES$ ./arguments a b c
//We have 4 arguments. 
//These are:
//./arguments 
//a 
//b 
//c


#include<stdio.h>

int main(int argc, char** argv) {
	printf("We have %d arguments. \nThese are:\n%s \n%s \n%s \n%s\n\n", argc, argv[0], argv[1], argv[2],argv[3]);
//    std::cout << "You have " << argc << " arguments. These are:" << std::endl;
//    for (int i = 0; i < argc; ++i) {
//        std::cout << argv[i] << std::endl;
//    }
 return 0;
}


</pre>
<!-- END CODE-CELL -->

<!-- File5 -->
<h3 >Soluția finală, mai puțin ignorarea comenzii cu argumentele legate cu plusuri</h3>
<!-- START CODE-CELL -->
<pre class="prettyprint">
// merge_n_files.c 
// ./merge_n_files f1 f2 f3 ff
// merge f1,..., fn into ff

#include <stdio.h>
#include <stdlib.h>
 
int main(int argc, char** argv) {
	char ch;
	int k;
	FILE *f1p, *ffp; 

   if( argc<=2 )
   {
	  printf("Run with %s f1 f2 ... fn ff.\n",argv[0]);
      perror("Error: exit 1!!!!!\n\n\n Wait for ");
      exit(EXIT_FAILURE);
   }  

    ffp = fopen(argv[argc-1],"w"); //  write mode;  all_files_merged	
   if( ffp == NULL )
   {
      perror("You need at least 2 arguments: at least one to merge into the last listed.\n");
      exit(EXIT_FAILURE);
      return 1;
   }    
    
    for(k=1; k <= argc-2; k++){
		f1p = fopen(argv[k],"r"); // read mode; file to be merged  
		while( ( ch = fgetc(f1p) ) != EOF ){
			fprintf(ffp, "%c", ch);
		}   
		fclose(f1p);
	}
	fclose(ffp);
	return 0;
}


</pre>
<!-- END CODE-CELL -->



</body>
</html>
